## 이미지의 특징 벡터만 저장

import torch
import torchvision.transforms as transforms
import torchvision.models as models
import numpy as np
import cv2
import os
import pickle

# ----------------
# 학습할 이미지.jpg 폴더 경로
image_folder = "images_kakao_emoji_list_test120"  

# 저장할 pkl 이름
pkl_name = "images_kakao_emoji_list_test120"

# ---------------- 1. 이미지 전처리 함수 ----------------
def preprocess_image(image_path):
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])
    image = cv2.imread(image_path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # BGR -> RGB 변환
    image = transforms.ToPILImage()(image)
    image = transform(image).unsqueeze(0)  # 배치 차원 추가
    return image

# ---------------- 2. 특징 벡터 추출 ----------------
def extract_features(image_paths, model, device):
    model = model.to(device).eval()
    features = {}

    for img_path in image_paths:
        image = preprocess_image(img_path).to(device)
        with torch.no_grad():
            feature = model(image)
        features[img_path] = feature.cpu().numpy().flatten()  # 이미지 경로와 특징 벡터 저장
    
    return features

# ---------------- 3. 실행 ----------------
if __name__ == "__main__":
    # 이미지 경로 설정
    image_folder = image_folder  # 학습할 이미지 폴더
    image_paths = [os.path.join(image_folder, img) for img in os.listdir(image_folder) if img.endswith(".jpg")]

    # 사전 학습된 ResNet18 모델을 사용하여 특징 추출 (FC Layer 제거)
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    resnet18 = models.resnet18(pretrained=True)
    feature_extractor = torch.nn.Sequential(*list(resnet18.children())[:-1])  # 마지막 FC Layer 제거

    # 특징 벡터 추출 및 저장
    features = extract_features(image_paths, feature_extractor, device)

    # 특징 벡터를 파일로 저장 (pickle 사용)
    with open(f"{pkl_name}.pkl", "wb") as f:
        pickle.dump(features, f)

    print(f"총 {len(features)}개의 이미지 특징 벡터가 저장되었습니다.")
